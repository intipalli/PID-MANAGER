								/*PID MANAGER*/
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>

#define MIN_PID 100
#define MAX_PID 1000
#define LENGTH MAX_PID-MIN_PID /*i.e 900*/

int array[LENGTH];       
int threads;

int allocate_pid()
{
	for(int i=0;i<LENGTH;i++)
  	{
    		if(array[i]==0)   
    		{
      			array[i]=1;     
      			return (i+100);        
    		}
  	}
  	return 1;                
}

int allocate_map(void )        
{
	printf("\n\t\tBitmap is initializing...");
	int i;
  	for(i=0;i<LENGTH;i++)
  	{
    		array[i]=0;
  	}
	int count=0;
  	for(int j=0;j<LENGTH;j++)
	{
		if(array[j]==0);
    		count++;
  	}
	if(count==MAX_PID - MIN_PID)
	return 0;
	else
	return 1;               
}

void release_pid(int pid)
{
	int p=pid-100;           
  	array[p]=0;
	printf("\nprocess identifier %d is terminated",pid);        
}


int check(int p)
{
	if(p>=100)                        
  	{
    		printf("\npid assigned successfully to the thread");
    		printf("\npid is:\t%d",p);
    		return 0;                               
  	}
  	else if(p==1)                     
  	{
    		printf("\npid is not assigned"); 
    		return 1;                         
  	}
	else                              
  	{
    		printf("\nerror! PID is not assigned);
    		return 1;
  	}
}

int busy()
{
	int count=0;
	for(int i=0;i<LENGTH;i++)
  	{
    		if(array[i]==1)              
    		{
      			printf("\n{%d}:\t%d",i+MIN_PID,array[i]);
      			count++;
   		}
  	}
  	printf("\nNumber of busy pid:\t%d",count);
}


void *thread_function(void *arg)              
{
	int a;
	a = allocate_pid();
	/*if(a==1)
	printf("\nproblem in providing pid..");
	if((a!=1)&&(a!=0)&&(a>=100))
	printf("\npid is:\t%d",a);*/
	printf("\nthread created");                
  	while(check(a)==1)             
  	{
    		sleep(5);                             
		a = allocate_pid();
		//printf("\npid is:\t%d",a);              
  	}
  	busy();                             
	sleep(5);                                                    
	release_pid(a);                                    
  	busy();
}

int main()
{
	int x;
	printf("\n\t\t\t*****PID MANAGER*****")
  	printf("\nEnter no of threads:\t");
  	scanf("%d",&threads);               
  	x = allocate_map();                   
  	if(x==0)                                  
	printf("\n\t\tBitmap is initialized...");
  	else
    	printf("Problem in initializing the Bitmap...");
  
        pthread_t tid[threads];              
  	for(int i=0;i<threads;i++)
  	{
		pthread_create(&tid[i],NULL,thread_function,NULL);           
  	}
  	for(int i=0;i<threads;i++)              
  	{
		pthread_join(tid[i],NULL);                     
  	}
  	printf("\nTask completed...");
}
  